C:\Users\Admin\Documents\SYSC2003-lab2.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Thu Jan 19 15:08:12 2017

    1:                                 
    2:                                 ; Write the HC12 code corresponding to the C code. Let one exercise continue to the next.
    3:                                 
    4:          =00000800                      org $800
    5:                                 
    6:                                 ; #define NUM_BYTES 4
    7:                                 ; unsigned byte byte1 = 1;
    8:                                 ; unsigned byte byte2 = 2;
    9:                                 ; unsigned byte byte3 = 3;
   10:                                 ; unsigned byte byte4;
   11:                                 
   12:          =00000004                NUM_BYTES:  EQU  4
   13:                                 
   14:     0800 06                       byte1: db 6
   15:     0801 09                       byte2: db 9
   16:     0802 03                       byte3: db 3
   17:     0803 +0001                    byte4: rmb 1
   18:                                 
   19:                                 
   20:                                 ;Moved things up here because of some interesting interactions
   21:     0804 0000                     sum: dw 0
   22:     0806 0002                     counter: dw 2
   23:     0808 0064                     maxCount: dw 100
   24:                                 
   25:                                 
   26:                                 
   27:                                 ; #define NUM_WORDS 4
   28:                                 ; int word1 = 1;
   29:                                 ; int word2 = 2;
   30:                                 ; int word3
   31:                                 
   32:          =00000004                NUM_WORDS: EQU 4
   33:                                 
   34:     080A 0008                     word1: dw 8
   35:     080C 0003                     word2: dw 3
   36:     080E +0002                    word3: rmw 1
   37:                                 
   38:          =00000024                END_STRING_CHAR: EQU '$'
   39:                                 
   40:                                 
   41:                                 
   42:                                 
   43:                                 
   44:                                 ; char string[] = "Look at the terminating character of this string"
   45:                                 ; WARNING: C inserts an implicit \0 terminating character at the end of strings
   46:                                 ;          In HC12, you must manually insert this terminating character.
   47:                                 ;          Furthermore, the character is '$'
   48:                                 
   49:     0810 4C 6F 6F 6B 20 61        string:   fcc "Look at the terminating character of this string"
           0816 74 20 74 68 65 20 
           081C 74 65 72 6D 69 6E 
           0822 61 74 69 6E 67 20 
           0828 63 68 61 72 61 63 
           082E 74 65 72 20 6F 66 
           0834 20 74 68 69 73 20 
           083A 73 74 72 69 6E 67 
   50:     0840 24                             fcb '$'
   51:                                 ;I thought it was '\0'...
   52:                                 
   53:          =00004000                      org $4000
   54:                                 
   55:                                         
   56:                                 ; if statement: Set word3 to the minimum value of word1 and word2
   57:                                 ; if word1 > word2, word3 = word2, else word3 = word1 ?
   58:                                 
   59:     4000 FC 080A                  LDD word1
   60:     4003 7C 080E                  STD word3
   61:     4006 FC 080C                  LDD word2
   62:     4009 CE 080E                  LDX #word3
   63:     400C 181F 00                  EMINM 0, X
   64:                                 
   65:                                 
   66:                                         
   67:                                 ; if else statement: Set byte4 to the minimum value of byte1, byte2, and byte3.
   68:                                 
   69:     400F B6 0800                  LDA byte1
   70:     4012 B1 0801                  CMPA byte2
   71:     4015 22 02                    BHI byte1Higher
   72:                                 
   73:     4017 20 03                    BRA compareByte3
   74:                                 
   75:     4019                          byte1Higher:
   76:     4019 B6 0801                  LDA byte2
   77:                                 
   78:     401C                          compareByte3:
   79:                                 
   80:     401C B1 0802                  CMPA byte3
   81:     401F 22 05                    BHI byte3Lower
   82:                                   
   83:     4021 7A 0803                  STAA byte4
   84:                                   
   85:     4024 20 06                    BRA finishByteCompare
   86:                                   
   87:     4026                          byte3Lower:
   88:                                   
   89:     4026 B6 0802                  LDA byte3
   90:     4029 7A 0803                  STAA byte4
   91:                                   
   92:                                 
   93:                                   
   94:                                 
   95:                                         
   96:                                 
   97:                                 ; for statement : Find the sum of all even numbers between 0 and 100, inclusive
   98:                                 ; You must write two versions of the solution: 
   99:                                 ;           Once using Compare (C*) and Branch (B*) instrutions
  100:                                 ;       and once using DBNE or IBNE or TBEQ
  101:                                 ;
  102:                                 ; _____  sum = 0;     // You must choose the data type of "sum" - byte or word, unsigned or signed
  103:                                 ;
  104:                                 ; for (reg int i = 2; i<100; i+=2) sum += i;
  105:                                 
  106:                                 
  107:     402C                                finishByteCompare: 
  108:                                         
  109:     402C FE 0808                        LDX maxCount
  110:     402F FC 0804                        LDD sum
  111:                                 
  112:     4032                                forLoopThings:
  113:                                         
  114:     4032 F3 0806                        ADDD counter
  115:                                         
  116:     4035 7C 0804                        STD sum
  117:                                         
  118:     4038 72 0806                        INC counter
  119:     403B 72 0806                        INC counter ;Must be done twice to increase by 2
  120:                                 
  121:     403E 8E 0808                        CPX #maxCount
  122:     4041 27 02                          BEQ finishLooping
  123:     4043 20 ED                          BRA forLoopThings
  124:                                         
  125:     4045                                finishLooping:
  126:                                         
  127:     4045 F3 0806                        ADDD counter
  128:     4048 7C 0804                        STD sum
  129:                                   
  130:                                         
  131:     404B 7F 3DFD                        STS $3DFD
  132:                                         
  133:                                         
  134:                                         
  135:                                         ;sum2: dw 0
  136:                                         
  137:                                         
  138:                                         ;;LDX maxCount
  139:                                         ;LDD sum2
  140:                                         
  141:                                         
  142:                                         
  143:                                         
  144:                                         ;ADDD
  145:                                         
  146:                                         ;DBNE X
  147:                                         
  148:                                   
  149:                                   
  150:                                   
  151:                                   
  152:                                 
  153:                                 
  154:                                 
  155:                                 
  156:                                 
  157:                                 
  158:                                 
  159:                                 ; while statement - Find the length of the string, by looking for its terminating character.
  160:                                 ;     You must use an INDEXed addressing mode in your solution.
  161:                                 ;
  162:                                 ; ______ length = 0;    // You must choose the data type of "length" - byte or word, unsigned or signed
  163:                                 ; while ( string[length] != '$' ) length++
  164:                                 ;
  165:                                 
  166:                                 ; nested for-if statement - Find the location of the first character 'n' in the string. Set to -1 if none is found.
  167:                                 ;       You must write two versions of this program
  168:                                 ;       Once, using the length variable found in the previous part, combined with DBNE or IBNE
  169:                                 ;   and Once, with the length unknown.
  170:                                 
  171:                                 
  172:                                 
  173:                                 
  174:                                 
  175:                                 
  176:                                 
  177:     404E                        END
  178:                                 
  179:                                 
  180:                                 
  181:                                 
  182:                                 
  183:                                 
  184:                                 
  185:                                 
  186:                                 
  187:                                 
  188:                                 
  189:                                 
  190:                                 
  191:                                 
  192:                                 
  193:                                 
  194:                                 
  195:                                 
  196:                                 
  197:                                 
  198:                                 
  199:                                 
  200:                                 
  201:                                 
  202:                                 
  203:                                 
  204:                                 
  205:                                 
  206:                                 

Symbols:
byte1                           *00000800
byte1higher                     *00004019
byte2                           *00000801
byte3                           *00000802
byte3lower                      *00004026
byte4                           *00000803
comparebyte3                    *0000401c
counter                         *00000806
finishbytecompare               *0000402c
finishlooping                   *00004045
forloopthings                   *00004032
maxcount                        *00000808
sum                             *00000804
word1                           *0000080a
word2                           *0000080c
word3                           *0000080e

