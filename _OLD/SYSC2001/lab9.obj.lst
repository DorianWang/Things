					; Program to accept a signed decimal number in the format +/-xxxx
					; Calculate the 8-bit "quarter precision" IEEE-754 encoding and print it to screen.
					; 
					
					; Format -/+xxxx in decimal, entered as ASCII.
					; 1) Get sign
					; 2) Get number
					; 3) Normalize number to get exponent
					; 3) Compute bias-** representation of exponent
					; 4) Create final IEEE-754 representation
					
					; Constant definitions
					Display	.EQU 04E9h	; address of Libra display
					
					; Global variables
					.ORG 0000
0000	00		SIGN:	.DB	0		; Sign of entered number (0=positive, 1=negative)
0001	00		NUM:	.DB	0		; Unsigned  binary representation of entered number
0002	00		EXP:	.DB	0		; Excess/bias representation of exponent (only uses lower 3 bits)
0003	00		MENT:	.DB 0		; Representation of normalized number
0004	00		FP:		.DB	0		; 8-bit quarter-precision IEEE-754 representation of number
					
					.ORG 1000h
					
					
					;;;---------------------------
					;Insert Sub-routines getChar, printStr, and newLine from Lab 7 here
					;;;---------------------------
					
					KBSTATUS .EQU 0064h			; port number of keyboard STATUS reg
					KBBUFFER .EQU 0060h			; port number of keyboard BUFFER reg
					
					getChar:
1000	52			push DX        ; save reg used
					GCWait:
1001	BA6400			MOV DX, KBSTATUS	; load addr of keybrd STATUS
1004	EC			IN	AL, DX			; Read contents of keyboard STATUS register
1005	3C01			cmp AL, 1			; key pressed?
1007	75F8			jne GCWait			; no, go back and check again for keypress
					
1009	BA6000			MOV DX, KBBUFFER	; load port number of kbrd BUFFER register
100C	EC			IN  AL, DX			; get key into AL from BUFFER
					GCDone:
100D	5A			pop DX        	; restore regs
100E	C3			ret
					
					;;;;;;;;;;;;;;;;;
					; newLine: Subroutine to print a newline and a linefeed character
					; Input parameters:
					; 	None.
					; Output parameters:
					;	None.
					
					; Constants for this subroutine:
					s_CR .EQU 0Dh		; ASCII value for Carriage return
					s_LF .EQU 0Ah		; ASCII value for NewLine
					
					newLine:
						; Save registers modified by this subroutine
100F	50			PUSH AX			; FIX ME
1010	52			PUSH DX			; FIX ME
						
1011	BAE904			MOV DX, Display		; Initialize the output port number in DX
1014	B00A			MOV AL, s_LF		; Load line feed (LF) into AL
1016	EE			out DX,AL			; print the char
1017	B00D			MOV AL, s_CR		; Load carriage return (CR) into AL
1019	EE			out DX,AL			; print the char
						
						; Restore registers
101A	5A			POP DX			; FIX ME
101B	58			POP AX			; FIX ME
						
101C	C3			RET
					
					;;;;;;;;;;;;;;;;;
					; printStr: Subroutine to print a '$'-terminated string
					; Input parameters:
					; 	SI: Address of start of string to be printed
					; Output parameters:
					;	None.
					printStr:
						; Save registers modified by this subroutine
101D	50			PUSH AX			; FIX ME
101E	53			PUSH BX			; FIX ME
101F	52			PUSH DX			; FIX ME
					
1020	BAE904			MOV DX, Display
1023	BB0000			MOV BX,0
					LoopPS:
1026	8A00			MOV AL, [SI+BX]	; Load the next char to be printed - USING INPUT PARAMETER SI
1028	3C24			CMP AL, '$'		; Compare the char to '$'
102A	7405			JE quitPS		; If it is equal, then quit subroutine and return to calling code
102C	EE			OUT DX,AL		; If it is not equal to '$', then print it
102D	43			INC BX			; Point to the next char to be printed
102E	E9F5FF			jmp LoopPS		; Jump back to the top of the loop
					quitPS:
						; Restore registers
1031	5A			POP DX			; FIX ME
1032	5B			POP BX			; FIX ME
1033	58			POP AX			; FIX ME
					
1034	C3			RET
					
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					; END OF SUBROUTINES FROM lab7.asm
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					
					
					
					;;;;;;;;;;;;;;;;;
					; normalizeNumber: converts a number into its normalized form.
					; Input parameters:
					; 	Memory 
					; Output parameters:
					;	Memory
					normalizeNumber:
1035	B007			MOV AL, 7
1037	8A1E0100			MOV BL, [NUM]
					
						loopBackNormalize:
103B	C0E301			SHL BL, 1
103E	7209			JC finishShiftingNormalize
1040	3C00			cmp AL, 0
1042	7405			je finishShiftingNormalize ;Avoids infinite loops
1044	FEC8			DEC AL
1046	E9F2FF			jmp loopBackNormalize
						
						finishShiftingNormalize:
					
						
1049	88060200			mov [EXP], AL
104D	881E0300			mov [MENT], BL
1051	C3			RET
						
						
					;;;;;;;;;;;;;;;;;
					; getSign: waits for user to press '+' or '-'. Ignores other chars. 
					;          Valid input sign character is echoed to screen.
					; Input parameters:
					; 	none.
					; Output parameters:
					;	AL: Returns a zero for '+' and one for '-'
					getSign:
1052	52			push DX
1053	BAE904			mov DX, Display
						getSignLoop:
1056	E8A7FF			call getChar
						
1059	3C2D			cmp AL, '-'
105B	7505			jne skipNegativeSign
105D	EE			out DX, AL
						;call newLine
105E	B001			mov AL, 1
1060	5A			pop DX
1061	C3			RET
						
						skipNegativeSign:
						
1062	3C2B			cmp AL, '+'
1064	7505			jne skipPositiveSign
1066	EE			out DX, AL
						;call newLine
1067	B000			mov AL, 0
1069	5A			pop DX
106A	C3			RET
						
						skipPositiveSign:
						
106B	E9E8FF			jmp getSignLoop
106E	5A			pop DX
106F	C3			RET
						
					
					;;;;;;;;;;;;;;;;;
					; getDigit: waits for user to press 0-9 digit. Ignores other chars except RETURN
					; Input parameters:
					; 	none.
					; Output parameters:
					;	AL: Returns binary value of digit in AL. Returns 99 if user presses ENTER
					
					; Constants used by this subroutine
					ENTERK .EQU 0Ah
					
					getDigit:
1070	52		push DX
1071	BAE904		mov DX, Display
						getDigitLoop:
						
1074	E889FF			CALL getChar		
						
1077	3C0A			cmp AL, ENTERK
1079	7504			jne skipEnterKey
107B	B063			mov AL, 99
107D	5A			pop DX
107E	C3			RET
						skipEnterKey:
						
107F	3C39			cmp AL, '9'
1081	7FF1			jg getDigitLoop
1083	3C30			cmp AL, '0'
1085	7CED			jl getDigitLoop
1087	EE			out DX, AL
1088	2C30			sub AL, '0'
108A	5A			pop DX
108B	C3			RET
						
					
					;;;;;;;;;;;;;;;;;
					; getNumber: Accepts a series of decimal digits and builds a binary number using shift-add
					; Input parameters:
					; 	none.
					; Output parameters:
					;	AL: Returns binary value of number in AL. 
					
					; Constants used by this subroutine
					DONE .EQU 99
					
					getNumber:				; FIX ME -- complete entire subroutine
108C	51			PUSH CX				; Save CX register
108D	53			PUSH BX
108E	B500			MOV CH, 0			; Use CH for running sum
1090	B10A			MOV CL, 10			; Use CL for multiplier=10
1092	B000			mov AL, 0
					loopGN:
					
1094	E8D9FF			call getDigit
1097	3C63			cmp AL, 99
1099	740F			je doneGN
109B	88C3			mov BL, AL
					
109D	88E8			mov AL, CH
109F	F6E1			mul CL
10A1	88C5			mov CH, AL
					
10A3	88D8			mov AL, BL
						
					
					
10A5	00C5			add CH, AL
					
10A7	E9EAFF			JMP loopGN
					doneGN:
10AA	88E8			mov AL, CH			; Put final sum into AL
10AC	5B			POP BX
10AD	59			POP CX				; Restore CX
10AE	C3			RET
						
					
10AF	456E7465..		Message1: .DB	'Enter a signed num (up to +- 30): $'		; FIX ME -- Message to be printed on screen
10D2	496E206E..			Message2part1: .DB	'In normalized form: $'
10E7	20782032..			Message2part2: .DB	' x 2^$'
10ED	496E2071..			Message3: .DB	'In quarter precision IEEE-754: $'  
							
					;;;;;;;;;;;;;
					; Main function: Asks the user to enter a signed number between -MAX to +MAX 
					; 				Computes quarter-precision 8-bit IEEE-754 representation
					;
					;				Uses printStr, newline, and getChar subroutines.
					main:
110D	BAE904			mov DX, Display			;FIX ME Print prompt
1110	BEAF10			mov SI, Message1
1113	E807FF			call printStr			;FIX ME
						;call newLine			;FIX ME
					
					part2:			
1116	E839FF			call getSign			;FIX ME - call getSign to get +/- sign from keyboard
1119	88060000			mov [SIGN], AL			;FIX ME - Save sign to global variable SIGN
111D	E86CFF			call getNumber			;FIX ME -  call getNumber to get the unsigned number
1120	88060100			mov [NUM], AL			;FIX ME -  Save number to global variable NUM
						
1124	E80EFF			call normalizeNumber
						
1127	8A1E0000			mov BL, [SIGN]
112B	C0E301			SHL BL, 1
112E	8B3E0200			mov DI, [EXP]
1132	C1E70D			SHL DI, 13
						
1135	C1E701			SHL DI, 1
1138	80D300			adc BL, 0
113B	C0E301			SHL BL, 1
						
113E	C1E701			SHL DI, 1
1141	80D300			adc BL, 0	
1144	C0E301			SHL BL, 1
						
1147	C1E701			SHL DI, 1
114A	80D300			adc BL, 0	
114D	C0E301			SHL BL, 1
						
1150	8B360300			mov SI, [MENT]
1154	C1E608			SHL SI, 8
						
1157	C1E601			SHL SI, 1
115A	80D300			adc BL, 0
115D	C0E301			SHL BL, 1
						
1160	C1E601			SHL SI, 1
1163	80D300			adc BL, 0
1166	C0E301			SHL BL, 1	
						
1169	C1E601			SHL SI, 1
116C	80D300			adc BL, 0
116F	C0E301			SHL BL, 1
						
1172	C1E601			SHL SI, 1
1175	80D300			adc BL, 0
						;SHL BL, 1	
					
						
1178	881E0400			MOV [FP], BL
						
						
					
						
						
						printPrettyStuff:
						
117C	E890FE			call newLine
						
117F	BED210			mov SI, Message2part1
1182	E898FE			call printStr
1185	BAE904			mov DX, Display
1188	8A060000			mov AL, [SIGN]
118C	8B3E0100			mov DI, [NUM]
1190	C1E708			SHL DI, 8
						
1193	3C01			cmp AL, 1
1195	7406			je printNegativeSign
1197	B02B			mov AL, '+'
1199	EE			out DX, AL
119A	E90300			jmp printBinary
						printNegativeSign:
119D	B02D			mov AL, '-'
119F	EE			out DX, AL
						
						
						printBinary:
11A0	B90400			mov CX, 4
						
11A3	B031			mov AL, '1'
11A5	EE			out DX, AL
11A6	B02E			mov AL, '.'
11A8	EE			out DX, AL
11A9	8A1E0300			mov BL, [MENT]
						
						printBinaryLoop:
11AD	B000			mov AL, 0
11AF	49			dec CX
11B0	C0E301			SHL BL, 1
11B3	1430			adc AL, '0'
11B5	EE			out DX, AL
11B6	81F90000			cmp CX, 0
11BA	75F1			jne printBinaryLoop
						
11BC	BEE710			mov SI, Message2part2
11BF	E85BFE			call printStr
						
11C2	8A060200			mov AL, [EXP]
11C6	0430			add AL, '0'
11C8	EE			out DX, AL
						
11C9	E843FE			call newLine
						
11CC	BEED10			mov SI, Message3
11CF	E84BFE			call printStr
						
11D2	8A1E0400			mov BL, [FP]
11D6	B90800			mov CX, 8
						printBinaryLoop2:
11D9	B000			mov AL, 0
11DB	49			dec CX
11DC	C0E301			SHL BL, 1
11DF	1430			adc AL, '0'
11E1	EE			out DX, AL
11E2	81F90000			cmp CX, 0
11E6	75F1			jne printBinaryLoop2
						
					
					;Quit
11E8	F4			HLT
						
						
					
					.END main		;Entry point of program is main()
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
